Security Primitives High Level Overview: 
- kube-apiserver: is center of all operation of kubernete, performs almost any of oeprations. 
    who? authentication mechanism (username and passwd, username and tokens, certificates, LDAP, service access)
    what? RBAC (role base access control) or ABAC (Access)

---

Authntication: End-user, Adm or Dev, or Bots(3rd party)
   --> all user accesses contorlled by kube-apiserver authenticates their request. 
          how? static passwd, static toekn, certificate, or identity service(LDAP) 
                   passwd (--basic-auth-file=user-details.csv)

---

TLS Certificate in Kubernetes Overview 
Uses gauranteed between two servier (or user) 

Certifcate (Public key) - cert + public key => *.crt, *pem 
            Private key - *.key 
In cluster? Master & Worker nodes
kubeclt                     
scheduler                     -->  KUBE-API server -->   ETCD server 
kube-controller manager
kube-proxy                                         -->   KUBELET (to interact with worker node)

Create CA? 
openssl genrsa -out admin.key 2048
openssl req -new -key admin.key -subj "\CN=kube-admin" -out admin.scr 
openssl x509 -req -in admin.csr -CA ca.crt -CAkey ca.k 
--> we can use this certifacte to use instead of user information (username and password or etc) 

---
How can we handle all certificate? 
By manual: really hard! | kubeadm: automatically generate ca for us 

---
How can we manage 'Certificate'? 
Share with someone? or through with someone? Ex) A to Ba -> at CA (Certificate Authority) -> Master Node (with Certificate API)
1. Create CertificateSigningRequest Object 
2. Review Requests
3. Apporve Requests
4. Share with user  (Ex) jane-csr.yaml) 
All certificate related behavir via 'Controller Manager' 

---
KubeConfig File:
Three section - Cluster (Development, Production, Google), Contexts (Combine the Cluster and User), Users (Admin Dev user, Prod user)
We just use already existed information (not create new certificate or so on)
commnad: kubectl config view --kubeconfig='config name'
---

API? 
metrics, healthz, version, api, apis, logs 

api(core group) 
v1
namespace, pods, rc, events, endpoitns, ... 

apis(named group)
apps. extensions, networking,k8s.io, ...   <-- API Groups 
v1 
deployments, replicasets, statefulsets ... 
list, get, cretae, delete <-- verb
Access API directly? curl https://localhost:6443 -k 
                     kubectl proxy 
                 kube proxy != kubectl proxy 
            
--- 

RBAC?
Create rule -> binds rule with user (Rule binding)
View role? kubectl get roles 
View role binding? kubectl get rolebindings 

Check permission? can-i 
ex) kubectl auth can-i create deployments 
---

Cluster Role and Role binding?
How about bidning with non-namspace specified pod? 
-> use 'Cluster scoped'
   1) create 'cluster-role' 2) binds cluster role 

---
Image? 
ex) image: nginx, where it pulls from? 
   image: docker.io/ginx/nginx 
          Registry/user account / image repository

Private repository? 
1) login my private repository: docker login private-registry.io 
2) run image from private repository: docker run private-registry.io/apps/internal-app 
3) create secret docker-registry: 
   kubectl create secret docker-registry regcred / 
   --docker-server=private-registry.io  \
   --docker-username=registry-user \
   --docker-password=registry-password \ 
   --docker-email= ' ' \ 
   